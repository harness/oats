{% if pathParamsCode %}
export interface {{pathParamsName}} {{pathParamsCode}}
{% endif %}

{% if queryParamsCode %}
export interface {{queryParamsName}} {{queryParamsCode}}
{% endif %}

{% if requestBodyCode %}
export type {{requestBodyName}} = {{requestBodyCode}};
{% endif %}

{% if bodyCode %}
{{bodyCode}}
{% endif %}

export type {{okResponseName}} = {{okResponseCode}};

export type {{errorResponseName}} = {{errorResponseCode}};

export interface {{fetcherPropsName}} extends
{% if pathParamsCode %}
  {{pathParamsName}},
{% endif %}
Omit<FetcherOptions<
  {% if queryParamsCode -%}{{queryParamsName}}{% else %}unknown{%- endif %},
  {% if requestBodyCode %}{{requestBodyName}}{% else %}unknown{%- endif %}
>, 'url'> {
  {% if queryParamsCode -%}
  queryParams: {{queryParamsName}};
  {%- endif %}
  {%- if requestBodyCode %}
  body: {{requestBodyName}};
  {%- endif %}
}

export function {{fetcherName}}(props: {{fetcherPropsName}}): Promise<{{okResponseName}}> {
   const {
  {% if pathParamsCode -%}
    {% for name in pathParamsNamesList -%}
    {{name}},
    {%- endfor %}
  {%- endif -%}
  ...rest
  } = props;

  return fetcher<
    {{okResponseName}},
    {% if queryParamsCode -%}{{queryParamsName}}{% else %}unknown{%- endif %},
    {% if requestBodyCode %}{{requestBodyName}}{% else %}unknown{%- endif %}
  >({
    url: `{{route | path_to_template}}`,
    method: {{verb | upcase | json}},
    ...rest
  })
}
